{"version":3,"sources":["components/Editor.js","components/MarkdownRepresentation.js","components/Previewer.js","App.js","reportWebVitals.js","index.js"],"names":["Editor","props","className","aria-hidden","id","type","placeholder","onChange","updateDisplayedText","inputText","MarkdownRepresentation","Fragment","mdrText","Previewer","style","display","mdText","App","useState","UseText","setUseText","event","target","value","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yMA0BeA,MAvBf,SAAgBC,GACf,OACC,sBAAKC,UAAU,SAAf,UACC,sBAAKA,UAAU,UAAf,UACC,sBAAKA,UAAU,cAAf,UACC,mBAAGA,UAAU,uBAAuBC,cAAY,SAChD,2CAED,mBAAGD,UAAU,wBAAwBC,cAAY,YAGlD,0BACCC,GAAG,SACHF,UAAU,WACVG,KAAK,OACLC,YAAY,wBACZC,SAAUN,EAAMO,oBALjB,SAMEP,EAAMQ,gB,iBCRIC,MARf,SAAgCT,GAC/B,OACC,cAAC,IAAMU,SAAP,UACC,cAAC,IAAD,UAAgBV,EAAMW,aCeVC,MApBf,SAAmBZ,GAClB,OACC,sBAAKC,UAAU,YAAf,UACC,sBAAKA,UAAU,UAAf,UACC,sBAAKA,UAAU,cAAf,UACC,mBAAGA,UAAU,uBAAuBC,cAAY,SAChD,8CAED,mBAAGD,UAAU,wBAAwBC,cAAY,YAElD,qBACCD,UAAU,YACVY,MAAO,CAAEC,QAAS,gBAClBX,GAAG,UAHJ,SAIC,cAAC,EAAD,CAAwBQ,QAASX,EAAMe,eCS5BC,MAjBf,WAAgB,IAAD,EACgBC,mBAAS,0pCADzB,mBACPC,EADO,KACEC,EADF,KAOd,OACC,cAAC,IAAMT,SAAP,UACC,sBAAKT,UAAU,gBAAf,UACC,cAAC,EAAD,CAAQO,UAAWU,EAASX,oBAN/B,SAA2Ba,GAC1BD,EAAWC,EAAMC,OAAOC,UAMtB,cAAC,EAAD,CAAWP,OAAQG,UCPRK,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.3d0fb68b.chunk.js","sourcesContent":["import './style.css';\nimport React from 'react';\n\nfunction Editor(props) {\n\treturn (\n\t\t<div className='editor'>\n\t\t\t<div className='infoBar'>\n\t\t\t\t<div className='infoBarLeft'>\n\t\t\t\t\t<i className='fa fa-free-code-camp' aria-hidden='true'></i>\n\t\t\t\t\t<h3>Editor</h3>\n\t\t\t\t</div>\n\t\t\t\t<i className='fa fa-window-maximize' aria-hidden='true'></i>\n\t\t\t</div>\n\n\t\t\t<textarea\n\t\t\t\tid='editor'\n\t\t\t\tclassName='inputBox'\n\t\t\t\ttype='text'\n\t\t\t\tplaceholder='enter markdown here..'\n\t\t\t\tonChange={props.updateDisplayedText}>\n\t\t\t\t{props.inputText}\n\t\t\t</textarea>\n\t\t</div>\n\t);\n}\n\nexport default Editor;\n","import React from 'react';\nimport ReactMarkdown from 'react-markdown';\nimport './style.css';\n\nfunction MarkdownRepresentation(props) {\n\treturn (\n\t\t<React.Fragment>\n\t\t\t<ReactMarkdown>{props.mdrText}</ReactMarkdown>\n\t\t</React.Fragment>\n\t);\n}\n\nexport default MarkdownRepresentation;\n","import MarkdownRepresentation from './MarkdownRepresentation';\n\nfunction Previewer(props) {\n\treturn (\n\t\t<div className='previewer'>\n\t\t\t<div className='infoBar'>\n\t\t\t\t<div className='infoBarLeft'>\n\t\t\t\t\t<i className='fa fa-free-code-camp' aria-hidden='true'></i>\n\t\t\t\t\t<h3>Previewer</h3>\n\t\t\t\t</div>\n\t\t\t\t<i className='fa fa-window-maximize' aria-hidden='true'></i>\n\t\t\t</div>\n\t\t\t<div\n\t\t\t\tclassName='mdDisplay'\n\t\t\t\tstyle={{ display: 'inline-block' }}\n\t\t\t\tid='preview'>\n\t\t\t\t<MarkdownRepresentation mdrText={props.mdText} />\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default Previewer;\n","import './App.css';\nimport './components/style.css';\nimport React, { useState } from 'react';\n\nimport 'font-awesome/css/font-awesome.min.css';\nimport Editor from './components/Editor';\nimport Previewer from './components/Previewer';\n\nfunction App() {\n\tconst [UseText, setUseText] = useState(\n\t\t`# Welcome to my React Markdown Previewer!\\n\\n## This is a sub-heading...\\n### And here's some other cool stuff:\\n\\nHeres some code, \\`<div></div>\\`, between 2 backticks.\\n\\n\\`\\`\\`\\n// this is multi-line code:\\n\\nfunction anotherExample(firstLine, lastLine) {\\n  if (firstLine == '\\`\\`\\`' && lastLine == '\\`\\`\\`') {\\n    return multiLineCode;\\n  }\\n}\\n\\`\\`\\`\\n\\nYou can also make text **bold**... whoa!\\nOr _italic_.\\nOr... wait for it... **_both!_**\\nAnd feel free to go crazy ~~crossing stuff out~~.\\n\\nThere's also [links](https://www.freecodecamp.org), and\\n> Block Quotes!\\n\\nAnd if you want to get really crazy, even tables:\\n\\nWild Header | Crazy Header | Another Header?\\n------------ | ------------- | -------------\\nYour content can | be here, and it | can be here....\\nAnd here. | Okay. | I think we get it.\\n\\n- And of course there are lists.\\n  - Some are bulleted.\\n     - With different indentation levels.\\n        - That look like this.\\n\\n\\n1. And there are numbered lists too.\\n1. Use just 1s if you want!\\n1. And last but not least, let's not forget embedded images:\\n\\n![freeCodeCamp Logo](https://cdn.freecodecamp.org/testable-projects-fcc/images/fcc_secondary.svg)\\n`\n\t);\n\tfunction handleInputChange(event) {\n\t\tsetUseText(event.target.value);\n\t}\n\treturn (\n\t\t<React.Fragment>\n\t\t\t<div className='MainContainer'>\n\t\t\t\t<Editor inputText={UseText} updateDisplayedText={handleInputChange} />\n\t\t\t\t<Previewer mdText={UseText} />\n\t\t\t</div>\n\t\t</React.Fragment>\n\t);\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}